describe('Create category', () => {
    const adminEmail = Cypress.env('ADMIN_EMAIL')
    const adminPassword = Cypress.env('ADMIN_PASSWORD')
    
    it("Try create empty category", () => {
        cy.loadDatabaseDump('empty_categories_dump')
        cy.goToCategories(adminEmail, adminPassword)
        cy.get('.button').children().contains('New Category').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('button').contains('Save').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Name")').should('contain', 'This field can not be empty')
        cy.get('.form-field-container').filter(':contains("Url key")').should('contain', 'This field can not be empty')  
    })

    it("Try create category without url key", () => {
        cy.loadDatabaseDump('empty_categories_dump')
        cy.goToCategories(adminEmail, adminPassword)
        cy.get('.button').children().contains('New Category').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Name")').find('input').type('cos')
        cy.get('button').contains('Save').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Name")').should('not.contain', 'This field can not be empty')
        cy.get('.form-field-container').filter(':contains("Url key")').should('contain', 'This field can not be empty')  
    })

    it("Try create category without name", () => {
        cy.loadDatabaseDump('empty_categories_dump')
        cy.goToCategories(adminEmail, adminPassword)
        cy.get('.button').children().contains('New Category').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Url key")').find('input').type('cos')
        cy.get('button').contains('Save').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Name")').should('contain', 'This field can not be empty')
        cy.get('.form-field-container').filter(':contains("Url key")').should('not.contain', 'This field can not be empty')  
    })

    it("Create category with required data", () => {
        cy.loadDatabaseDump('empty_categories_dump')
        cy.goToCategories(adminEmail, adminPassword)
        cy.get('.button').children().contains('New Category').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Name")').find('input').type('cos')
        cy.get('.form-field-container').filter(':contains("Url key")').find('input').type('cos')
        cy.get('button').contains('Save').click()
        cy.location('pathname').should('include', '/admin/categories/edit')
        cy.get('.form-field-container').filter(':contains("Name")').find('input').should('have.value', 'cos')
        cy.get('.form-field-container').filter(':contains("Url key")').find('input').should('have.value', 'cos')  
    })

    it("Try create category with whitespace name", () => {
        cy.loadDatabaseDump('empty_categories_dump')
        cy.goToCategories(adminEmail, adminPassword)
        cy.get('.button').children().contains('New Category').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Name")').find('input').type('    ')
        cy.get('.form-field-container').filter(':contains("Url key")').find('input').type('cos')
        cy.get('button').contains('Save').click()
        cy.get('.Toastify__toast--error').should('exist')
        cy.location('pathname').should('eq', '/admin/categories/new')
    })

    it("Try create category with url key with special sign", () => {
        cy.loadDatabaseDump('empty_categories_dump')
        cy.goToCategories(adminEmail, adminPassword)
        cy.get('.button').children().contains('New Category').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Name")').find('input').type('cos')
        cy.get('.form-field-container').filter(':contains("Url key")').find('input').type('cos ')
        cy.get('button').contains('Save').click()
        cy.get('.Toastify__toast--error').should('exist')
        cy.location('pathname').should('eq', '/admin/categories/new')
    })

    it("Create category with required data and and disabled status", () => {
        cy.loadDatabaseDump('empty_categories_dump')
        cy.goToCategories(adminEmail, adminPassword)
        cy.get('.button').children().contains('New Category').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Name")').find('input').type('cos')
        cy.get('.form-field-container').filter(':contains("Url key")').find('input').type('cos')
        cy.get('.card-section:contains("Status")').find('label:contains("Disabled")').click()
        cy.get('button').contains('Save').click()
        cy.location('pathname').should('include', '/admin/categories/edit')
        cy.get('.form-field-container').filter(':contains("Name")').find('input').should('have.value', 'cos')
        cy.get('.form-field-container').filter(':contains("Url key")').find('input').should('have.value', 'cos')
        cy.get('.card-section:contains("Status")').find('label:contains("Disabled")').find('.radio-checked').should('exist')
        cy.get('.card-section:contains("Status")').find('label:contains("Enabled")').find('.radio-checked').should('not.exist')
        cy.get('.breadcrum-icon').click()
        cy.location('pathname').should('eq', '/admin/categories')
        cy.get('.listing > tbody').find('tr').should('have.length', 2)
        cy.get('.listing > tbody').find('tr').eq(1).find('td').eq(1).should('have.text', 'cos')
        cy.get('.listing > tbody').find('tr').eq(1).find('td').eq(2).find('.default.dot').should('exist')
    })

    it("Create category with required data and and enabled status", () => {
        cy.loadDatabaseDump('empty_categories_dump')
        cy.goToCategories(adminEmail, adminPassword)
        cy.get('.button').children().contains('New Category').click()
        cy.location('pathname').should('eq', '/admin/categories/new')
        cy.get('.form-field-container').filter(':contains("Name")').find('input').type('cos')
        cy.get('.form-field-container').filter(':contains("Url key")').find('input').type('cos')
        cy.get('.card-section:contains("Status")').find('label:contains("Enabled")').click()
        cy.get('button').contains('Save').click()
        cy.location('pathname').should('include', '/admin/categories/edit')
        cy.get('.form-field-container').filter(':contains("Name")').find('input').should('have.value', 'cos')
        cy.get('.form-field-container').filter(':contains("Url key")').find('input').should('have.value', 'cos')
        cy.get('.card-section:contains("Status")').find('label:contains("Disabled")').find('.radio-checked').should('not.exist')
        cy.get('.card-section:contains("Status")').find('label:contains("Enabled")').find('.radio-checked').should('exist')
        cy.get('.breadcrum-icon').click()
        cy.location('pathname').should('eq', '/admin/categories')
        cy.get('.listing > tbody').find('tr').should('have.length', 2)
        cy.get('.listing > tbody').find('tr').eq(1).find('td').eq(1).should('have.text', 'cos')
        cy.get('.listing > tbody').find('tr').eq(1).find('td').eq(2).find('.success.dot').should('exist')
    })
})